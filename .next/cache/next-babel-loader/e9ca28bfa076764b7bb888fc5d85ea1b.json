{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as types from './action-types';\nconst initialState = {\n  landingState: 'Sign In',\n  loading: false\n};\n\nconst mainReducer = (state = JSON.parse(JSON.stringify(initialState)), action) => {\n  switch (action.type) {\n    case types.UPDATE_LOADING:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: action.loading\n      });\n\n    case types.UPDATE_LANDING_STATE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        landingState: action.state\n      });\n\n    case types.UPDATE_USER_LOGIN_STATE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        uid: action.uid\n      });\n\n    case types.UPDATE_USER_INFO:\n      return _objectSpread(_objectSpread({}, state), action.info);\n\n    default:\n      return state;\n  }\n};\n\nexport default mainReducer;","map":{"version":3,"sources":["C:/Users/gxlizy/Desktop/javascript/stoinksims/frontend/redux/reducer.js"],"names":["types","initialState","landingState","loading","mainReducer","state","JSON","parse","stringify","action","type","UPDATE_LOADING","UPDATE_LANDING_STATE","UPDATE_USER_LOGIN_STATE","uid","UPDATE_USER_INFO","info"],"mappings":";;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,gBAAvB;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,YAAY,EAAE,SADG;AAEjBC,EAAAA,OAAO,EAAE;AAFQ,CAArB;;AAKA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeP,YAAf,CAAX,CAAT,EAAmDQ,MAAnD,KAA8D;AAC9E,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKV,KAAK,CAACW,cAAX;AACI,6CACON,KADP;AAEIF,QAAAA,OAAO,EAAEM,MAAM,CAACN;AAFpB;;AAKJ,SAAKH,KAAK,CAACY,oBAAX;AACI,6CACOP,KADP;AAEIH,QAAAA,YAAY,EAAEO,MAAM,CAACJ;AAFzB;;AAKJ,SAAKL,KAAK,CAACa,uBAAX;AACI,6CACOR,KADP;AAEIS,QAAAA,GAAG,EAAEL,MAAM,CAACK;AAFhB;;AAKJ,SAAKd,KAAK,CAACe,gBAAX;AACI,6CACOV,KADP,GAEOI,MAAM,CAACO,IAFd;;AAKJ;AACI,aAAOX,KAAP;AA1BR;AA4BH,CA7BD;;AA+BA,eAAeD,WAAf","sourcesContent":["import * as types from './action-types';\r\n\r\nconst initialState = {\r\n    landingState: 'Sign In',\r\n    loading: false,\r\n};\r\n\r\nconst mainReducer = (state = JSON.parse(JSON.stringify(initialState)), action) => {\r\n    switch (action.type) {\r\n        case types.UPDATE_LOADING:\r\n            return {\r\n                ...state,\r\n                loading: action.loading,\r\n            };\r\n\r\n        case types.UPDATE_LANDING_STATE:\r\n            return {\r\n                ...state,\r\n                landingState: action.state,\r\n            };\r\n\r\n        case types.UPDATE_USER_LOGIN_STATE:\r\n            return {\r\n                ...state,\r\n                uid: action.uid,\r\n            };\r\n\r\n        case types.UPDATE_USER_INFO:\r\n            return {\r\n                ...state,\r\n                ...action.info,\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default mainReducer"]},"metadata":{},"sourceType":"module"}